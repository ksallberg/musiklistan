<head>
    <link href="hacker.css" rel="stylesheet">
    <script src="playlist.js"></script>
    <script src="https://w.soundcloud.com/player/api.js"></script>
    <script src="http://www.youtube.com/player_api"></script>
    <script type="text/javascript">

        <erl>

            -include("common.hrl").
            out(A) ->
                Query    = A#arg.querydata,
                ListId   = lists:nthtail(5, Query),
                Playlist = musiklistan:playlist_get(ListId),
                Tracks   = Playlist#playlist.tracks,
                FLists   =
                    lists:foldl(fun(Track, Acc) ->
                                    Acc ++
                                    "{\"id\": \"" ++ Track#track.id ++ "\", " ++
                                    "source: \""++
                                    atom_to_list(Track#track.source) ++
                                    "\"},"
                                end,
                                "var tracks = [",
                                Tracks),
                {html, FLists ++ "];"}.
        </erl>

        var currentTrack = -1;
        var youtubePlayer;

        function nextTrack() {

            currentTrack ++;

            for(var i = 0; i < tracks.length; i ++) {
                document.getElementById(tracks[i].id)
                        .style.backgroundColor = 'transparent';
            }

            document.getElementById(tracks[currentTrack].id)
                    .style.backgroundColor = 'blue';

            emit_player(tracks[currentTrack].id, tracks[currentTrack].source);
        }

        function prevTrack() {

            currentTrack --;
            for(var i = 0; i < tracks.length; i ++) {
                document.getElementById(tracks[i].id)
                        .style.backgroundColor = 'transparent';
            }

            document.getElementById(tracks[currentTrack].id)
                    .style.backgroundColor = 'blue';

            emit_player(tracks[currentTrack].id, tracks[currentTrack].source);
        }

        function goto(trackid) {
            currentTrack = trackid;
            for(var i = 0; i < tracks.length; i ++) {
                document.getElementById(tracks[i].id)
                        .style.backgroundColor = 'transparent';
            }

            document.getElementById(tracks[currentTrack].id)
                    .style.backgroundColor = 'blue';

            emit_player(tracks[currentTrack].id, tracks[currentTrack].source);
        }

        function onPlayerReady(event) {
            event.target.playVideo();
        }

        function onPlayerStateChange(event) {
            console.log(event);
            if(event.data == 0)
                nextTrack();
        }

        function getYoutube(id) {
            // Remove whatever is in the container
            var frame = document.getElementById("container");
            frame.parentNode.removeChild(frame);

            // And create a new container
            var newDiv = document.createElement('div');
            newDiv.id = 'container';
            document.getElementsByTagName('body')[0].appendChild(newDiv);

            //Finally, add the youtube player
            player = new YT.Player('container', {
                height: '390',
                width: '640',
                videoId: id,
                events: {
                    'onReady':       onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        function getSoundcloud(id) {

            // Remove whatever is in the container
            var frame = document.getElementById("container");
            frame.parentNode.removeChild(frame);

            // And create a new container
            var newDiv = document.createElement('div');
            newDiv.id = 'container';
            document.getElementsByTagName('body')[0].appendChild(newDiv);

            var t = "<iframe id=\"sound\" width=\"50% \" height=\"300\" " +
                    "scrolling=\"no\"" +
                    "frameborder=\"no\" src=\"https://w.soundcloud.com/player/"
                    + "?url=https%3A//api.soundcloud.com/tracks/" + id +
                    "&amp;auto_play=true&amp;hide_related=false&amp;" +
                    "show_comments=true&amp;show_user=true&amp;show_reposts="+
                    "false&amp;visual=true\"></iframe>";


            document.getElementById("container").innerHTML = t;

            //Apply for song finished event
            var widget = SC.Widget("sound");
            widget.bind(SC.Widget.Events.FINISH, function(eventData) {
                nextTrack();
            });
        }

        function emit_player(text, source) {
            if(source == "youtube")
                getYoutube(text);
            if(source == "soundcloud")
                document.getElementById("container").innerHTML
                    = getSoundcloud(text);
        }
    </script>

</head>


<body onload="nextTrack();">

<a onclick="prevTrack();"><<</a> | <a onclick="nextTrack();">>></a>

<div id='container'></div>

<erl>

-include("common.hrl").

add_link({Track, Place}) ->
    PlaceStr = lists:flatten(io_lib:format("~p", [Place])),
    "<div id=\"" ++ Track#track.id ++ "\"><a onclick='goto("
    ++ PlaceStr ++ ");'>" ++ Track#track.title ++ "</a></div>".

out(A) ->
    PostVars = yaws_api:parse_post(A),
    Query = A#arg.querydata,
    H = A#arg.headers,
    C = H#headers.cookie,
    case yaws_api:find_cookie_val("usersession", C) of
        [] -> {html, "You need to log in!"};
        Cookie ->
            case yaws_api:cookieval_to_opaque(Cookie) of
                {ok, OP} ->
                    Username = OP#usercookie.username,
                    ListId   = lists:nthtail(5, Query),
                    Playlist = musiklistan:playlist_get(ListId),
                    Tracks   =
                        lists:zip(Playlist#playlist.tracks,
                                  lists:seq(0,
                                            length(Playlist#playlist.tracks) - 1
                                           )),
                    FLists   =
                        lists:foldl(fun(Track, Acc) ->
                                        Acc ++ add_link(Track)
                                    end,
                                    "",
                                    Tracks),
                    {html, "<h1>" ++ Playlist#playlist.name ++
                           "</h1><br/>" ++ FLists};
                {error, no_session} ->
                    {html, "Not logged in..."}
            end
    end.

</erl>

    <form method="post" action="pl_post.yaws">

        <erl>
            out(A) ->
                Query    = A#arg.querydata,
                ListId = lists:nthtail(5, Query),
                {html, "<input type=\"hidden\" name=\"playlist\" value=\""
                       ++ ListId ++ "\"/>" ++
                       "<input type=\"hidden\" name=\"redirect\" value=\"" ++
                       "pl2.yaws\"/>"
                }.

        </erl>

        <h1>Add track to playlist</h1>
        track URL:
        <br/>
        <input name="track_name" type="text"/>
        <br/>
        <input type="submit"/>
    </form>
</body>

<a href="playlists.yaws">Tillbaka...</a>